import 'package:flutter/material.dart';
import 'package:flutter_color_changer/app/app.dart';
import 'package:flutter_color_changer/app/app_controller.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('Initial state displays Hello There text', (
    WidgetTester tester,
  ) async {
    await tester.pumpWidget(App());

    expect(find.text('Hello There'), findsOneWidget);
    expect(find.byType(Switch), findsOneWidget);
  });

  testWidgets('Tap changes background color', (WidgetTester tester) async {
    await tester.pumpWidget(App());

    final gesture = await tester.startGesture(const Offset(100, 100));
    await gesture.up();

    await tester.pumpAndSettle();

    // Assert
    final appController = AppController();
    expect(
      appController.currentBackgroundColor,
      isNot(Colors.white),
    ); // Assuming white is the initial color
  });

  testWidgets('Toggle automatic color change', (WidgetTester tester) async {
    // Arrange
    await tester.pumpWidget(App());

    // Act
    final switchFinder = find.byType(Switch);
    expect(switchFinder, findsOneWidget);

    await tester.tap(switchFinder);
    await tester.pump();

    // Assert
    final appController = AppController();
    expect(appController.autoGenerated, isTrue);
  });

  testWidgets('Click effect appears on tap', (WidgetTester tester) async {
    await tester.pumpWidget(App());
    final appController = AppController();

    await tester.tap(find.byKey(const ValueKey("backgroundKey")));
    expect(appController.showEffect, isTrue);
    await tester.pumpAndSettle();

    expect(appController.showEffect, isFalse);
  });

  testWidgets('Check RGB value is displayed', (WidgetTester tester) async {
    await tester.pumpWidget(App());

    final appController = AppController();
    final red = appController.currentBackgroundColor.red.toStringAsFixed(1);
    final green = appController.currentBackgroundColor.green.toStringAsFixed(1);
    final blue = appController.currentBackgroundColor.blue.toStringAsFixed(1);

    expect(find.textContaining("Red: $red"), findsOneWidget);
    expect(find.textContaining("Green: $green"), findsOneWidget);
    expect(find.textContaining("Blue: $blue"), findsOneWidget);
  });
}
