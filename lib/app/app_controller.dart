import 'dart:async';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_color_changer/app/consts.dart';

/// [AppController] manages the state and behavior of the app,
/// including color changes, auto-generation of colors, click effects,
/// and text color contrast.

class AppController extends ChangeNotifier {
  ///Factory constructor to return the same instance
  factory AppController() => _instance;
  AppController._internal();

  static final AppController _instance = AppController._internal();

  /// The current background color.
  Color currentBackgroundColor = Colors.white;

  /// Indicates whether colors are being auto-generated.
  bool autoGenerated = false;

  /// Timer used for automatically generating colors at intervals.
  Timer? colorChangeTimer;

  /// The position where the user clicked , used for visual effects.
  Offset? clickPosition;

  /// Whether the click effect is currently being shown.
  bool showEffect = false;

  /// Animation controller used for managing the click effect animation.
  late AnimationController animationController;

  /// Toggles the auto-generation of colors on and off.
  void toggleAutoGenerate() {
    autoGenerated = !autoGenerated;

    if (autoGenerated) {
      colorChangeTimer = Timer.periodic(
        const Duration(seconds: 2),
        (timer) => generateColor(),
      );
    } else {
      colorChangeTimer?.cancel();
    }
    notifyListeners();
  }

  /// Starts the visual effect at a specified [position] on the screen.

  void startClickEffect(Offset position) {
    clickPosition = position;
    showEffect = true;
    generateColor();
    animationController.forward(from: 0).whenComplete(() {
      showEffect = false;
    });
  }

  /// Generates a random color and assigns it to [currentBackgroundColor].
  void generateColor() {
    final red = Random().nextInt(256);
    final blue = Random().nextInt(256);
    final green = Random().nextInt(256);
    currentBackgroundColor = Color.fromRGBO(red, blue, green, fullOpacityValue);
    notifyListeners();
  }

  /// Gets a color for text that contrasts with the [currentBackgroundColor].
  /// `Colors.black` if the [currentBackgroundColor] is light (high luminance),
  /// or `Colors.white` if the [currentBackgroundColor] is dark (low luminance).
  Color get contrastTextColor {
    final luminance = currentBackgroundColor.computeLuminance();
    return luminance > highLuminanceThreshold ? Colors.black : Colors.white;
  }

  /// Gets the RGB values of the [currentBackgroundColor] as a formatted string.
  String get rgbValue {
    final String red = currentBackgroundColor.red.toStringAsFixed(1);
    final String green = currentBackgroundColor.green.toStringAsFixed(1);
    final String blue = currentBackgroundColor.blue.toStringAsFixed(1);
    return 'Red: $red, Green: $green, Blue: $blue';
  }
}
